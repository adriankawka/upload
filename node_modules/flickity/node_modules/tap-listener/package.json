{
  "name": "tap-listener",
  "version": "2.0.0",
  "description": "Listens to taps",
  "main": "tap-listener.js",
  "dependencies": {
    "unipointer": "^2.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/metafizzy/tap-listener.git"
  },
  "keywords": [
    "tap",
    "touch",
    "click",
    "event",
    "browser",
    "DOM"
  ],
  "author": {
    "name": "David DeSandro"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/metafizzy/tap-listener/issues"
  },
  "homepage": "https://github.com/metafizzy/tap-listener",
  "readme": "# Tap listener\n\n_Listens to taps_\n\nOn mobile devices, the `click` event is triggered after a delay. Tap Listener listens for native touch and pointer events to trigger a callback immediately.\n\nUsed in [Flickity](http://flickity.metafizzy.co).\n\n``` js\nvar tapper = new TapListener( element );\ntapper.on( 'tap', function( event ) {\n  console.log('tap happened');\n});\n```\n\nUse `TapListener` to extend a class.\n\n``` js\nfunction Widget() {\n  //...\n}\n// inherit Tap Listener\nWidget.prototype = new TapListener();\n// or\n_.extend( Widget.prototype, TapListener.prototype );\n\nvar widgy = new Widget( element );\nwidgy.on( 'tap', function() {...});\n```\n\n## Install\n\nBower: `bower install tap-listener --save`\n\nnpm: `npm install tap-listener`\n\n### RequireJS\n\n``` js\nrequirejs( [ 'path/to/tap-listener' ], function( TapListener ) {\n  var tapper = new TapListener( element );\n});\n```\n\n### Browserify\n\n``` js\nvar TapListener = require('tap-listener');\nvar tapper = new TapListener( element );\n```\n\n## API\n\n``` js\nvar tapper = new TapListener( element )\n// element {Element} - binds tap events to element\n\ntapper.bindTap( element )\n// element {Element} - binds tap events to element\n\ntapper.unbindTap()\n// unbinds tap events\n\ntapper.on( eventName, callback )\n// eventName {String} - tap, pointerDown, pointerMove, pointerUp, pointerCancel\n// callback {Function}\n\nfunction callback( event, pointer ) {...}\n// event {Event} - the original mouseup, touchend, or pointerup event\n// pointer {Event} or {Touch} - event object with pageX and pageY\n\ntapper.destroy()\n// unbinds tap events\n```\n\n---\n\nMIT license\n\nBy [Metafizzy](http://metafizzy.co)\n",
  "readmeFilename": "README.md",
  "_id": "tap-listener@2.0.0",
  "_from": "tap-listener@^2.0.0"
}
