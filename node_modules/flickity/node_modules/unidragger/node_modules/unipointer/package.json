{
  "name": "unipointer",
  "version": "2.1.0",
  "description": "Do one thing with one pointer",
  "main": "unipointer.js",
  "dependencies": {
    "ev-emitter": "~1.0.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/metafizzy/unipointer.git"
  },
  "keywords": [
    "pointer",
    "touch",
    "mouse",
    "browser",
    "DOM"
  ],
  "author": {
    "name": "David DeSandro"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/metafizzy/unipointer/issues"
  },
  "homepage": "https://github.com/metafizzy/unipointer",
  "readme": "# Unipointer\n\nBase class for doing one thing with pointer event\n\nUsed with [Unidragger](https://github.com/metafizzy/unidragger) and [TapListener](https://github.com/metafizzy/tap-listener)\n\n## Install\n\nBower: `bower install unipointer`\n\nnpm: `npm install unipointer`\n\n## Usage\n\n``` js\n// create new class\nfunction PointerFun( elem ) {\n  this.element = elem;\n  // binds mousedown/touchstart/pointerdown event\n  this._bindStartEvent( this.element, true );\n}\n// inherit Unipointer\nPointerFun.prototype = new Unipointer();\n\n// overwrite public pointer methods\nPointerFun.prototype.pointerDown = function( event, pointer ) {\n  console.log('pointer down');\n};\n\nPointerFun.prototype.pointerMove = function( event, pointer ) {\n  console.log('pointer move');\n};\n\nPointerFun.prototype.pointerUp = function( event, pointer ) {\n  console.log('pointer up');\n};\n\nPointerFun.prototype.pointerCancel = function( event, pointer ) {\n  console.log('pointer cancel');\n};\n\n// triggered on pointerUp and pointerCancel \nPointerFun.prototype.pointerDone = function( event, pointer ) {\n  console.log('pointer done');\n};\n```\n\n---\n\nMIT license\n\nBy [Metafizzy](http://metafizzy.co)\n",
  "readmeFilename": "README.md",
  "_id": "unipointer@2.1.0",
  "_from": "unipointer@~2.1.0"
}
